---
- name: Playbook to create a VMware vm from a custom template
  hosts: localhost
  become: false
  gather_facts: false

  vars:

    my_vms_from_template:
      - name: windows-from-tmplt-1
        vcpu: 4
        vmem_MB: 8000
        template: custom-windows19-template
      - name: windows-from-tmplt-2
        vcpu: 2
        vmem_MB: 4000
        template: custom-windows19-template
      - name: rhel92-from-tmplt-1
        vcpu: 4
        vmem_MB: 8000
        template: custom-rhel92-template
      - name: rhel92-from-tmplt-2
        vcpu: 2
        vmem_MB: 4000
        template: custom-rhel92-template

  tasks:

    - name: Get all Local Content Library
      vmware.vmware_rest.content_locallibrary_info:
      register: all_content_libraries

    - name: Filter our content library
      ansible.builtin.set_fact:
        my_content_library: "{{ all_content_libraries.value | selectattr('name', 'equalto', my_content_library_name) }}"

    - name: Get the list of items of the library
      register: lib_items
      vmware.vmware_rest.content_library_item_info:
        library_id: '{{ my_content_library[0].id }}'

    - name: Deploy a new VM based on the template
      loop: "{{ my_vms_from_template }}"
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        session_timeout: 10000
        name: "{{ item.name }}"
        library: '{{ my_content_library[0].id }}'
        template_library_item: "{{ lib_items.value | selectattr('name', 'equalto', item.template) | map(attribute='id') | first }}"
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          # datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"
        powered_on: true
        hardware_customization:
          cpu_update:
            num_cpus: "{{ item.vcpu }}"
          memory_update:
            memory: "{{ item.vmem_MB }}"
        state: deploy
