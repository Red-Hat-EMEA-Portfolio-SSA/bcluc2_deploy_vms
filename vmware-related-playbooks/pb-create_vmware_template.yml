########################################################################
#
# The aim of this playbook is to create a VMware template out of an custom RHEL ISO image.
# We need to follow several steps before we can achieve that:
#   1. Boot a VM from a iso image in cdrom (that iso needs to be configured to run unattended installation, typically using kickstart)
#   2. Optional: access to the VM and apply changes, maybe we want to install some packages or apply some configuration
#   3. Poweroff virtual machine (thoretically there is no need but it's safer and consume less CPU/memory when taking the snapshot)
#   4. Create template from virtual machine
#
########################################################################
---
- name: Playbook to create a VMware template from a custom iso image
  hosts: localhost
  become: true
  gather_facts: false

  tasks:

    - name: Get id of child folder
      vmware.vmware_rest.vcenter_folder_info:
        parent_folders: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/Workloads') }}"
      register: my_folder

    - name: Show list of child folders
      ansible.builtin.debug:
        var: my_folder.value[0].folder

    - name: Boot virtual machine from our custom ISO image in CDROM
      vmware.vmware_rest.vcenter_vm:
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
          folder: "{{ my_folder.value[0].folder }}"
        name: temporary_vm_do_not_delete
        guest_OS: RHEL_9_64
        power_on: true
        hardware_version: VMX_19
        cpu:
          count: "{{ my_template_cpu_count }}"
        memory:
          hot_add_enabled: true
          size_MiB: "{{ my_template_memory_mib }}"
        cdroms:
          - start_connected: true
            backing:
              iso_file: "{{ my_iso_file_path }}"
              type: ISO_FILE
              state: present
            type: SATA
            sata:
              bus: 0
              unit: 0
            state: connected
        disks:
          - type: SATA
            new_vmdk:
              capacity: '{{ my_template_disk_capacity_gb | human_to_bytes(default_unit="G") }}'
        nics:
          - backing:
              type: DISTRIBUTED_PORTGROUP
              network: "{{ lookup('vmware.vmware_rest.network_moid', '/{{ my_vcenter_datacenter_name }}/network/{{ my_vcenter_virtual_switch_name }}/{{ my_vcenter_port_segment_name }}') }}"

    - name: Look up the VM called test_vm1 in the inventory
      register: my_vm
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
        - temporary_vm_do_not_delete

    - name: Turn the power of the VM on
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ my_vm.value[0].vm }}"