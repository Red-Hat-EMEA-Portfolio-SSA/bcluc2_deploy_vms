########################################################################
#
# The aim of this playbook is to create a VMware template out of an custom RHEL ISO image.
# We need to follow several steps before we can achieve that:
#   1. Boot a VM from a iso image in cdrom (that iso needs to be configured to run unattended installation, typically using kickstart)
#   2. Not implemented yet: install VMtools
#   3. Poweroff virtual machine (thoretically there is no need but it's safer and consume less CPU/memory when taking the snapshot)
#   4. Create template from virtual machine
#
########################################################################
---
- name: Playbook to create a VMware template from a custom iso image
  hosts: localhost
  become: false
  gather_facts: false

  vars:

    # Vars created by VMware admin

    my_vcenter_datacenter_name: "bcl" # already in place
    my_vcenter_cluster_name: "bcl-cluster" # already in place
    my_vcenter_datastore_name: "datastore1 (1)" # already in place
    my_vcenter_virtual_switch_name: "DSwitch-test" # vmc-hostswitch # already in place
    my_vcenter_port_segment_name: "DPortGroup-test" # already in place
    my_vcenter_folder_name: vms # create?
    # my_vcenter_vm_parent_folder_name: vms # create?
    # my_vcenter_vm_child_folder_name: sandbox-6kmgg # should we work without parent folder
    my_content_library_name: my_library_on_datastore # create
    my_template_name: custom-windows19-template # create

    # Vars  related to the template

    my_template_cpu_count: 4
    my_template_memory_mib: 8192
    my_template_disk_capacity_gb: 30
    my_iso_file_path: "[datastore1 (1)] ISO Files/my_custom_rhel92.iso"

  tasks:

    - name: Boot virtual machine from our custom ISO image in CDROM
      vmware.vmware_rest.vcenter_vm:
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"
        name: _temporary_vm_do_not_delete
        guest_OS: RHEL_9_64
        power_on: true
        hardware_version: VMX_19
        cpu:
          count: "{{ my_template_cpu_count }}"
        memory:
          hot_add_enabled: true
          size_MiB: "{{ my_template_memory_mib }}"
        cdroms:
          - start_connected: true
            backing:
              iso_file: "{{ my_iso_file_path }}"
              type: ISO_FILE
              state: present
            type: SATA
            sata:
              bus: 0
              unit: 0
            state: connected
        disks:
          - type: SATA
            new_vmdk:
              capacity: '{{ my_template_disk_capacity_gb | human_to_bytes(default_unit="G") }}'
        nics:
          - start_connected: true
            backing:
              type: DISTRIBUTED_PORTGROUP # STANDARD_PORTGROUP
              network: "{{ lookup('vmware.vmware_rest.network_moid', '/{{ my_vcenter_datacenter_name }}/network/{{ my_vcenter_virtual_switch_name }}/{{ my_vcenter_port_segment_name }}') }}"

    - name: Look for MOID of VM called _temporary_vm_do_not_delete
      register: my_vm
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
          - _temporary_vm_do_not_delete

    - name: Power on VM
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ my_vm.value[0].vm }}"

    - name: Sleep for 10 minutes so the machine can finish the install
      ansible.builtin.wait_for:
        timeout: 600

    #- name: Power off VM
    #  vmware.vmware_rest.vcenter_vm_power:
    #    state: stop
    #    vm: "{{ my_vm.value[0].vm }}"

    #- name: List the cdrom devices on the guest
    #  vmware.vmware_rest.vcenter_vm_hardware_cdrom_info:
    #    vm: '{{ my_vm.value[0].vm }}'
    #  register: cdrom_guest

    #- name: Detach CDROM from VM
    #  vmware.vmware_rest.vcenter_vm_hardware_cdrom:
    #    vm: '{{ my_vm.value[0].vm }}'
    #    cdrom: "{{ cdrom_guest.value[0] }}"
    #    state: absent

    #- name: Create a content library based on a DataStore
    #  vmware.vmware_rest.content_locallibrary:
    #    name: "{{ my_content_library_name }}"
    #    description: automated
    #    publish_info:
    #      published: true
    #      authentication_method: NONE
    #    storage_backings:
    #      - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
    #        type: DATASTORE
    #    state: present

    #- name: List all Local Content Library
    #  register: all_content_libraries
    #  vmware.vmware_rest.content_locallibrary_info:

    #- name: Filter out content library id
    #  ansible.builtin.set_fact:
    #    my_content_library: "{{ all_content_libraries.value | selectattr('name', 'equalto', my_content_library_name) }}"

    #- name: Create a template from VM in the library
    #  vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
    #    name: "{{ my_template_name }}"
    #    library: '{{ my_content_library[0].id }}'
    #    source_vm: '{{ my_vm.value[0].vm }}'
    #    placement:
    #      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
    #      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"

    #- name: Delete VM
    #  vmware.vmware_rest.vcenter_vm:
    #    vm: '{{ my_vm.value[0].vm }}'
    #    state: absent
