########################################################################
#
# The aim of this playbook is to create a VMware template out of an custom RHEL ISO image.
# We need to follow several steps before we can achieve that:
#   1. Boot a VM from a iso image in cdrom (that iso needs to be configured to run unattended installation, typically using kickstart)
#   2. Not implemented yet: install VMtools
#   3. Poweroff virtual machine (thoretically there is no need but it's safer and consume less CPU/memory when taking the snapshot)
#   4. Create template from virtual machine
#
########################################################################
---
- name: Playbook to create a VMware template from a custom iso image
  hosts: localhost
  become: false
  gather_facts: false

  vars:
    # Vars created by VMware admin
    my_flavor: "win"

    my_template_name: "{{ flavor[my_flavor].my_template_name }}"

    # Vars related to the template

    my_template_cpu_count: "{{ flavor[my_flavor].my_template_cpu_count }}"
    my_template_memory_mib: "{{ flavor[my_flavor].my_template_memory_mib }}"
    my_template_disk_capacity_gb: "{{ flavor[my_flavor].my_template_disk_capacity_gb }}"
    my_iso_file_fullname: "{{ my_vcenter_isofile_dir_with_ds }}/{{ flavor[my_flavor].my_custom_iso_short }}"

  tasks:
    - name: Boot virtual machine from our custom ISO image in CDROM
      vmware.vmware_rest.vcenter_vm:
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"
        name: _temporary_winvm_do_not_delete
        guest_OS: WINDOWS_SERVER_2019
        power_on: true
        hardware_version: VMX_19
        cpu:
          count: "{{ my_template_cpu_count }}"
        memory:
          hot_add_enabled: true
          size_MiB: "{{ my_template_memory_mib }}"
        cdroms:
          - start_connected: true
            backing:
              iso_file: "{{ my_iso_file_fullname }}"
              type: ISO_FILE
              state: present
            type: SATA
            sata:
              bus: 0
              unit: 0
            state: connected
        disks:
          - type: SATA
            new_vmdk:
              capacity: '{{ my_template_disk_capacity_gb | human_to_bytes(default_unit="G") }}'
        nics:
          - start_connected: true
            backing:
              type: DISTRIBUTED_PORTGROUP # STANDARD_PORTGROUP
              network: "{{ lookup('vmware.vmware_rest.network_moid', '/{{ my_vcenter_datacenter_name }}/network/{{ my_vcenter_virtual_switch_name }}/{{ my_vcenter_port_segment_name }}') }}"

    - name: Look for MOID of VM called _temporary_winvm_do_not_delete
      register: my_vm
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
          - _temporary_winvm_do_not_delete

    - name: Collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vm: "{{ my_vm.value[0].vm }}"
      register: my_vm_info

    - name: Print out infos on my_vm_info
      ansible.builtin.debug:
        var: my_vm_info
      when: debug | default ('false') | bool

    - name: Power on VM
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ my_vm.value[0].vm }}"

    #     - name: Sleep for 20 minutes so the machine can finish the install
    #        ansible.builtin.wait_for:
    #          timeout: 1200

    - name: Wait for power state to be operations_ready
      vmware.vmware_rest.vcenter_vm_guest_power_info:
        vm: "{{ my_vm_info.id }}"
      register: my_vm_powerstate
      retries: 180 # 30 minutes
      delay: 10 # seconds
      until:
        - my_vm_powerstate.value is defined
        - my_vm_powerstate.value.operations_ready
        - my_vm_powerstate.value.state == "RUNNING"

    - name: Wait for guest network interfaces information to be available
      vmware.vmware_rest.vcenter_vm_guest_networking_interfaces_info:
        vm: "{{ my_vm_info.id }}"
      register: my_vm_interfaceinfo
      retries: 60
      delay: 10 # seconds
      until:
        - my_vm_interfaceinfo.value[0] is defined

    - name: Print out infos on my_vm_interfaceinfo
      ansible.builtin.debug:
        var: my_vm_interfaceinfo
      when: debug | default('false') | bool

    - name: Extract ip address
      ansible.builtin.set_fact:
        # my_vm_ip: "{{ my_vm_interfaceinfo.value[0].ip.ip_addresses[1].ip_address }}"
        my_vm_ip: "{{ my_vm_interfaceinfo | community.general.json_query(ip_query) | first }}"
      vars:
        ip_query: "value[0].ip.ip_addresses[?state=='PREFERRED'].ip_address"

    - name: Print out ip address
      ansible.builtin.debug:
        var: my_vm_ip
      when: debug | default('false') | bool

    - name: Add Host to inventory
      ansible.builtin.add_host:
        name: "_temporary_winvm"
        ansible_host: "{{ my_vm_ip }}"
        # ansible_user:
        # ansible_password:
      when: awx_inventory_name is not defined

    - name: Add hosts to static inventory
      ansible.controller.host:
        # controller_host: "{{Â controller_host }}"
        # controller_username: "{{ controller_username }}"
        # controller_password: "{{ controller_password }}"
        validate_certs: false
        inventory: "{{ awx_inventory_name }}"
        name: "_temporary_winvm"
        enabled: true
        state: present
        variables:
          ansible_host: "{{ my_vm_ip }}"
          ansible_connection: winrm
          ansible_winrm_transport: basic
      when: awx_inventory_name is defined

    # - name: Wait until configuration ends
    #   ansible.builtin.pause:
    #     minutes: 1

    - name: Wait for winRM to be ready
      ansible.builtin.wait_for:
        port: 5986
        host: "{{ my_vm_ip }}"
        delay: 10 # seconds
        timeout: 600

    - name: List the cdrom devices on the guest
      vmware.vmware_rest.vcenter_vm_hardware_cdrom_info:
        vm: "{{ my_vm.value[0].vm }}"
      register: cdrom_guest

    - name: Detach CDROM from VM
      vmware.vmware_rest.vcenter_vm_hardware_cdrom:
        vm: "{{ my_vm.value[0].vm }}"
        cdrom: "{{ cdrom_guest.value[0].cdrom }}"
        state: absent
      when: cdrom_template_vm.value[0] is defined

    - name: Power off VM
      vmware.vmware_rest.vcenter_vm_power:
        state: stop
        vm: "{{ my_vm.value[0].vm }}"

    - name: Create a content library based on a DataStore
      vmware.vmware_rest.content_locallibrary:
        name: "{{ my_content_library_name }}"
        description: automated
        publish_info:
          published: true
          authentication_method: NONE
        storage_backings:
          - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
            type: DATASTORE
        state: present
      register: my_content_library_created

    - name: List all Local Content Library
      register: all_content_libraries
      vmware.vmware_rest.content_locallibrary_info:

    - name: Filter out content library id
      ansible.builtin.set_fact:
        my_content_library: "{{ all_content_libraries.value | selectattr('name', 'equalto', my_content_library_name) }}"

    - name: Print my_content_library_created
      ansible.builtin.debug:
        var: my_content_library_created
      when: debug | default('false') | bool

    - name: Print my_content_library
      ansible.builtin.debug:
        var: my_content_library
      when: debug | default('false') | bool

    - name: Create a template from VM in the library
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        name: "{{ my_template_name }}"
        # library: "{{ my_content_library[0].id }}"
        library: "{{ my_content_library_created.id }}"
        source_vm: "{{ my_vm.value[0].vm }}"
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"

    -  name: debug debug | default('false') 
       debug:
         var: debug | default('false') 
        
    -  name: debug deletevm
       debug:
         var: deletevm
        
    - name: Delete VM
      vmware.vmware_rest.vcenter_vm:
        vm: "{{ my_vm.value[0].vm }}"
        state: absent
      when: 
        - deletevm | default('true') | bool
        - not debug | default('false') | bool
