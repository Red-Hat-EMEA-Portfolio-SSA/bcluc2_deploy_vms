---
- name: Playbook to create a VMware template from a custom iso image
  hosts: localhost
  become: false
  gather_facts: false

  vars:

    # Vars created by VMware admin
    my_flavor: "rhel"

    my_template_name: "{{ flavor[my_flavor].my_template_name }}"

    # Vars  related to the template

    my_template_cpu_count: "{{ flavor[my_flavor].my_template_cpu_count }}"
    my_template_memory_mib: "{{ flavor[my_flavor].my_template_memory_mib }}"

    my_template_disk_capacity_gb: "{{ flavor[my_flavor].my_template_disk_capacity_gb }}"

    my_iso_file_fullname: "{{ my_vcenter_isofile_dir_with_ds }}/{{ flavor[my_flavor].my_custom_iso_short }}"


  tasks:

    - name: Look for MOID of VM called _temporary_rhelvm_do_not_delete
      register: my_vm
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
          - _temporary_rhelvm_do_not_delete

    - name: Collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vm: '{{ my_vm.value[0].vm }}'
      register: test_vm1_info

    - debug:
        msg: "{{ test_vm1_info }}"

    - name: List the cdrom devices on the guest
      vmware.vmware_rest.vcenter_vm_hardware_cdrom_info:
        vm: '{{ my_vm.value[0].vm }}'
      register: cdrom_template_vm

    - debug:
        msg: "{{ cdrom_template_vm }}"

    - name: Delete CDROM from VM
      vmware.vmware_rest.vcenter_vm_hardware_cdrom:
        vm: '{{ my_vm.value[0].vm }}'
        cdrom: "{{ cdrom_template_vm.value[0].cdrom }}"
        start_connected: false
        state: absent
      when: cdrom_template_vm.value[0] is defined

    - name: Power off VM
      vmware.vmware_rest.vcenter_vm_power:
        state: stop
        vm: "{{ my_vm.value[0].vm }}"

    - name: Create a content library based on a DataStore
      vmware.vmware_rest.content_locallibrary:
        name: "{{ my_content_library_name }}"
        description: automated
        publish_info:
          published: true
          authentication_method: NONE
        storage_backings:
          - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/{{ my_vcenter_datacenter_name }}/datastore/{{ my_vcenter_datastore_name }}') }}"
            type: DATASTORE
        state: present
      register: my_content_library_created

    - name: List all Local Content Library
      register: all_content_libraries
      vmware.vmware_rest.content_locallibrary_info:

    - name: Filter out content library id
      ansible.builtin.set_fact:
        my_content_library: "{{ all_content_libraries.value | selectattr('name', 'equalto', my_content_library_name) }}"

    - name: print my_content_library_created
      debug: 
        var: my_content_library_created
      when: debug | default ('false') | bool

    - name: print my_content_library
      debug: 
        var: my_content_library
      when: debug | default ('false') | bool

    - name: Create a template from VM in the library
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        name: "{{ my_template_name }}"
        # library: '{{ my_content_library[0].id }}'
        library: '{{ my_content_library_created.id }}'
        source_vm: '{{ my_vm.value[0].vm }}'
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/{{ my_vcenter_datacenter_name }}/host/{{ my_vcenter_cluster_name }}') }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/{{ my_vcenter_datacenter_name }}/vm/{{ my_vcenter_folder_name }}') }}"

#    - name: Delete VM
#      vmware.vmware_rest.vcenter_vm:
#        vm: '{{ my_vm.value[0].vm }}'
#        state: absent
